# Set the firewall to allow SSH
firewall --enabled --port=22:tcp

# Install Mode
install

# Lock the root account
rootpw --lock

# Force this to use the shadow file
auth --useshadow --passalgo=sha512

# Install via Text Mode
text

# Disable firstboot. We don't have a GUI
firstboot --disable

# Set the keyboard
keyboard us

# Set the language
lang en_US

#Networking Information
network  --bootproto=static --ip={{ item.server.IP }}  --netmask={{ item.server.Subnet }}  --gateway={{ item.server.Gateway }} --device={{item.server.mgmt_nic}} --onboot=on --activate

# Turn on SELinux
selinux --enforcing

# No X Windows please
skipx

# Installation logging level
logging --level=info

# Reboot after install
reboot --eject

# System timezone to UTC
timezone --isUtc Etc/UTC

#%include /tmp/uefi
%include /tmp/part-include

%pre
#!/bin/sh
set -e
trap '' 2 # prevent ctrl-c

exec < /dev/tty6 > /dev/tty6

# Switch to the tty so we can type stuff
chvt 6

# Get the megarams
mem=$(($(free -m | grep Mem | awk '{print $2}')+2000))

# Set drives to 0 for now
NUMDRIVES=0

# Block device directory
DIR="/sys/block"

# Minimum drive size in GIGABYTES
MINSIZE=99

# Set the root drive to blank for now
ROOTDRIVE=""

if [ -d /sys/firmware/efi ]; then
  is_uefi=true
fi

TEMPDRIVE=/tmp/part-include
ROOTPART=300
SAMEDRIVE=""
NSMDRIVE=""
nsm1=""
nsm2=""
nsm3=""

#If there's more than one drive we need to make some choices
NUMDRIVES=0
for DEV in sda sdb sdc sdd hda hdb hdc hdd vda vdb vdc vdd nvme0n1 nvme1n1 nvme2n1 nvme3n1 xvda xvdb xvdc xvdd; do
  if [ -d $DIR/$DEV ]; then
    REMOVABLE=$(cat $DIR/$DEV/removable)
    if (( $REMOVABLE == 0 )); then
      NUMDRIVES=$((NUMDRIVES+1))
      SIZE=$(cat $DIR/$DEV/size)
      GB=$(($SIZE/2**21))
    fi
  fi
done
rootchoice={{item.os_drives[0]}}
ROOTDRIVE=$rootchoice
NSMDRIVE=$ROOTDRIVE
{% for drive in item.data_drives %}
nsm{{ loop.index }}={{ drive }}
{% endfor %}
ROOTRAWSIZE=$(cat $DIR/$ROOTDRIVE/size)
ROOTGB=$(($ROOTRAWSIZE/2**21))
ROOTSIZE=$(($ROOTGB/3))
ROOTPART=300
ROOTPART=$ROOTGB

echo 'zerombr' > $TEMPDRIVE

# clear all existing partitions
echo -e "clearpart --all --initlabel --drives=sda,{{ item.data_drives | join(',') }}" >> $TEMPDRIVE

# create /boot partition
echo -e "part /boot/efi --fstype="fat32" --size=1024 --ondisk=$ROOTDRIVE" >> $TEMPDRIVE
echo -e "part /boot --fstype="xfs" --ondisk=sda --size=500" >> $TEMPDRIVE

echo -e "part pv.1 --ondisk=$ROOTDRIVE --size=1 --grow" >> $TEMPDRIVE
{% for drive in item.data_drives %}
{% set dn = (loop.index +1 ) %}
echo -e "part pv.{{ dn }} --ondisk={{ drive }} --size=1 --grow" >> $TEMPDRIVE
{% endfor %}

# create volume group
echo -e "volgroup vg_centos pv.1{% for drive in item.data_drives %}{% set ds = (loop.index +1 ) %} pv.{{ ds }}{% endfor %}" >> $TEMPDRIVE

# create logical volumes
echo -e "logvol / --vgname=vg_centos --size=307200 --name=lv_root" >> $TEMPDRIVE
echo -e "logvol /tmp --vgname=vg_centos --size=2048 --name=lv_tmp" >> $TEMPDRIVE
echo -e "logvol swap --vgname=vg_centos --size=10240 --name=lv_swap" >> $TEMPDRIVE
echo -e "logvol /nsm --vgname=vg_centos --size=645120 --grow --name=lv_nsm" >> $TEMPDRIVE


# User configuration
manufacturer="Security Onion Solutions"
family="Automated"
product=$(dmidecode -s system-product-name)

INSTALL=no
PWMATCH=no

if [[ "$manufacturer" == "Security Onion Solutions" && "$family" == "Automated" ]]; then
  INSTALL=yes
  PWMATCH=yes
  SOUSER=onion
  echo "PRODUCT=$product" >> /tmp/variables.txt
  echo "SOUSER=$SOUSER" >> /tmp/variables.txt
  echo "PASSWORD=automation" >> /tmp/variables.txt
fi

echo "creating user {{item.server.Username}}"

SOUSER="{{item.server.Username}}"

echo "Sending your passwords to the mothership"

PASSWORD1="{{ DMSS_Pass }}"
PASSWORD2="{{ DMSS_Pass }}"
if [ $PASSWORD1 == $PASSWORD2 ]; then
  echo PASSWORD=$PASSWORD1 >> /tmp/variables.txt
  echo SOUSER=$SOUSER >> /tmp/variables.txt
  PWMATCH=yes
fi

echo "Installation finished"

exec < /dev/tty1 > /dev/tty1
chvt 1
%end



%post --nochroot
echo "Finished username"
cp /tmp/variables.txt /mnt/sysimage/tmp/variables.txt
mkdir /mnt/sysimage/root/SecurityOnion
mkdir -p /mnt/sysimage/nsm/docker-registry/docker
mkdir -p /mnt/sysimage/nsm/repo
rsync -avh --exclude 'TRANS.TBL' /run/install/repo/SecurityOnion/* /mnt/sysimage/root/SecurityOnion/
rsync -avh --exclude 'TRANS.TBL' /run/install/repo/docker/* /mnt/sysimage/nsm/docker-registry/docker/
rsync -avh --exclude 'TRANS.TBL' /run/install/repo/Packages/* /mnt/sysimage/nsm/repo/
chmod +x /mnt/sysimage/root/SecurityOnion/setup/so-setup

%end

%post
set -e
source /tmp/variables.txt
rm -f /tmp/variables.txt

useradd $SOUSER
cp -Rvp /root/SecurityOnion /home/$SOUSER/
chown -R $SOUSER:$SOUSER /home/$SOUSER/SecurityOnion/
chmod +x /home/$SOUSER/SecurityOnion/so-setup
chmod -R +x /home/$SOUSER/SecurityOnion/salt/common/tools/sbin/
echo $SOUSER:$PASSWORD | chpasswd --crypt-method=SHA512
echo "$SOUSER   ALL=(ALL)       ALL" >> /etc/sudoers
echo "$SOUSER   ALL=(ALL) NOPASSWD: /home/$SOUSER/SecurityOnion/setup/so-setup" >> /etc/sudoers
#echo "sudo /home/$SOUSER/SecurityOnion/setup/so-setup iso" >> /home/$SOUSER/.bash_profile

if [ ! -z $PASSWORD ]; then
  echo $SOUSER:$PASSWORD | chpasswd --crypt-method=SHA512
fi

#if [ ! -z $PRODUCT ]; then
#  echo "@reboot sudo /home/$SOUSER/SecurityOnion/setup/so-setup iso $PRODUCT" | crontab -u $SOUSER -
#fi

# fix onboot line so interface will come up.
sed -i 's/ONBOOT=no/ONBOOT=yes/g' /etc/sysconfig/network-scripts/ifcfg-eno1


# SSHD Banner
touch /etc/ssh/sshd-banner
echo "##########################################" > /etc/ssh/sshd-banner
echo "##########################################" >> /etc/ssh/sshd-banner
echo "###                                    ###" >> /etc/ssh/sshd-banner
echo "###   UNAUTHORIZED ACCESS PROHIBITED   ###" >> /etc/ssh/sshd-banner
echo "###                                    ###" >> /etc/ssh/sshd-banner
echo "##########################################" >> /etc/ssh/sshd-banner
echo "##########################################" >> /etc/ssh/sshd-banner

# Set the SSHD banner
echo "Banner /etc/ssh/sshd-banner" >> /etc/ssh/sshd_config

if [ -z $PRODUCT ]; then
  exec < /dev/tty6 > /dev/tty6
  chvt 6
  clear
  exec < /dev/tty1 > /dev/tty1
  chvt 1
fi
echo "finished ks"
%end


%packages --nobase
@core
%end
#reboot
